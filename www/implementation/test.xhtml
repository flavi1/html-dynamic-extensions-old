<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:n1="https://example.com/n1" xmlns:n2="https://example.com/n2" dsv="0.1">	
  <head>
	<!-- Include Handlebars from a CDN -->
	<script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js" />
	<script src="ddxhtml.js" />
	<link href="global.xdss" rel="designsheet" />
	
	<model>
	   <instance><datas xmlns="">
			<var>MA VALEUR</var>
	   </datas></instance>
	</model>
	
  </head>
  <body>
	  

	  <n1:el>Ça touche</n1:el>
	  
	  <n1:el xmlns="different">Ça touche pas</n1:el>
	  
	  <parent xmlns="different">
		  <n1:el>Ça touche pas non plus</n1:el>
	  </parent>
	  
	  <n2:el>Ça touche</n2:el>
	  
	  <n2:el xmlns="different">Ça touche pas</n2:el>
	  
	  <parent xmlns="different">
		  <n2:el>Ça touche pas non plus</n2:el>
	  </parent>

	  
<p class="curved">Un exemple avec <span >texte <strong>pas incurvé</strong></span> dans ma phrase.</p>
<p>Un exemple avec <span style="--curved-text:40;">texte <strong>incurvé</strong></span> dans ma phrase.</p>
<h1 style="--curved-text:30;">Un exemple avec <span ref="var" >texte <strong>incurvé</strong></span> dans un titre.</h1>
	  
    <p id="previousSibling">Hello World</p>
    <p id="p" ref="init" class="curved">Hello World2</p>
		
	<span ref="var">
		<itemset>
			<item>
				<value>1</value>
				<label>I disklike</label>
			</item>
			<item>
				<value>2</value>
				<label>I don't care</label>
			</item>
			<item>
				<value>3</value>
				<label>I love dde2html</label>
			</item>
		</itemset>
	</span>
    
    
    
<div group-ref="person1">
	<span ref="first_name" />
	<span ref="last_name" />
	<span ref="email" />
</div>

<template id="my_tpl" type="x-handlebars">
	<span>My value :</span> {{value}}
</template>

<div id="fruits" each-item="fruit" >
	<strong ref="name" />
	Color : <span ref="color" /><br />
</div>




<div shown="step=1">
	First Panel
	<t set="step" value="2">Next</t>
</div>
<div shown="step=2">
	Second Panel
	<t set="step" value="1">Prev</t>
	<t set="step" value="3">Next</t>
</div>
<div shown="step=3">
	Final Panel
	<t set="step" value="2">Prev</t>
</div>
    
    
<div id="myresult"></div>
    
    <script><![CDATA[


document.body.innerHTML += `<span ref="var_test">
		<itemset>
			<item>
				<value>1</value>
				<label>I disklike</label>
			</item>
			<item>
				<value>2</value>
				<label>I don't care</label>
			</item>
			<item>
				<value>3</value>
				<label>I love dde2html</label>
			</item>
		</itemset>
	</span>`


document.body.innerHTML += `
<div group-ref="person1">
	<span ref="first_name" />
	<span ref="last_name" />
	<span ref="email" />
</div>`;

document.body.innerHTML += `
<div id="TEST">
	INNERHTML OK ?<input><p>
</div>`;


setTimeout( () => { 
	console.log(document.querySelector('#myresult'))
	document.querySelector('#myresult').innerHTML += '<input><br><p>OK ;)'
 }, 500 )


setTimeout( () => { 
	document.querySelector('h1').setAttribute('style', '--curved-text:50;')
 }, 1000 )
setTimeout( () => { 
	document.querySelector('h1').removeAttribute('style')
	document.querySelector("head > model > instance:nth-child(1) > datas > var").innerXML = 'MoDiFied!!^^'
 }, 1500 )
setTimeout( () => { 
	document.querySelector('h1').setAttribute('style', '--curved-text:31;')
 }, 2000 )
setTimeout( () => { 
	var newEl = document.createElementNS('http://www.w3.org/1999/xhtml', 'strong')
	document.body.appendChild(newEl);
	newEl.innerHTML = 'Hello World!'
	newEl.setAttribute('ref', 'TeSt');
	newEl.setAttribute('style', 'color: red;');
	newEl.innerHTML = 'New Hello World!'
	
 }, 2500 )
 
 setTimeout( () => { 
	document.querySelectorAll('[each-item], [ref], [render-by]').forEach( (el) => {
		if(!el.initialDOM)
			console.warn('initialDOM not setted', el)
		else
			console.log('initialDOM setted', el)
	})
 }, 3000 )

 setTimeout( () => { 
	 document.querySelector('head > model').innerHTML += '<instance xmlns="2"><datas xmlns="2"><somecontent /></datas></instance>';
 }, 3500 )



<!-- Ok. here we need JS to fix the lack of SVG viewBox auto sizing feature. See : https://www.w3.org/Graphics/SVG/WG/wiki/Intrinsic_Sizing -->
<!-- JS fix from : https://typeofnan.dev/how-to-perfectly-fit-an-svg-to-its-contents-using-javascript/ -->
document.querySelectorAll('span').forEach((el) => {
	el.addEventListener('refreshDesign', (ev) => {
		svg = ev.target.shadowRoot.querySelector('svg[data-auto-viewbox]');
		if(svg) {
			var el = (svg.getAttribute('data-auto-viewbox')) ? svg.querySelector(svg.getAttribute('data-auto-viewbox')) : null;
			var bb = el.getBBox();
			svg.setAttribute('viewBox', bb.x + ' '+ bb.y + ' ' + bb.width + ' ' + bb.height);
			console.warn(svg.getAttribute('viewBox'))
		}
	})
})

    ]]></script>
    
    <style>
    p.curved {
		--curved-text:40;
		display: inline-block;
		padding: 0;
		margin: 0;
	}
    </style>
    
    TODO : tester https://stackoverflow.com/questions/23468890/svg-path-gives-different-bbox-values-in-chrome-and-firefox
    
    
    
    
  </body>
</html>
